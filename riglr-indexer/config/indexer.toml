# RIGLR Indexer Configuration
# This is the default configuration for the RIGLR indexer service

[service]
name = "riglr-indexer"
version = "0.1.0"
environment = "development"
# node_id = "auto-generated"
shutdown_timeout = "30s"
health_check_interval = "30s"

[storage]
[storage.primary]
backend = "postgres"
url = "postgresql://postgres:password@localhost:5432/riglr_indexer"

[storage.primary.pool]
max_connections = 20
min_connections = 5
connect_timeout = "30s"
idle_timeout = "5m"
max_lifetime = "30m"

[storage.cache]
backend = "redis"
redis_url = "redis://localhost:6379"

[storage.cache.ttl]
default = "5m"
events = "1h"
aggregates = "30m"

[storage.cache.memory]
max_size_bytes = 100_000_000  # 100MB
max_entries = 10_000

[storage.retention]
default = "30d"
# by_event_type = { "swap" = "90d", "transfer" = "30d" }

[storage.retention.archive]
enabled = false
# backend would be configured here if enabled

[storage.retention.archive.compression]
algorithm = "zstd"
level = 3

[processing]
workers = 8  # Will be set to CPU count if not specified
batch.max_size = 1000
batch.max_age = "5s"
batch.target_size = 100

[processing.queue]
capacity = 10000
queue_type = "memory"
# disk_settings would be configured for disk queue

[processing.retry]
max_attempts = 3
base_delay = "100ms"
max_delay = "30s"
backoff_multiplier = 2.0
jitter = 0.1

[processing.rate_limit]
enabled = true
max_events_per_second = 10000
burst_capacity = 1000

[api]
[api.http]
bind = "0.0.0.0"
port = 8080
timeout = "30s"
max_request_size = 1_000_000  # 1MB
keep_alive = "60s"

[api.websocket]
enabled = true
max_connections = 1000
buffer_size = 1024
heartbeat_interval = "30s"

[api.auth]
enabled = false
method = "none"
# jwt and api_key would be configured if auth is enabled

[api.cors]
enabled = true
allowed_origins = ["*"]
allowed_methods = ["GET", "POST"]
allowed_headers = ["*"]
max_age = "1h"

[metrics]
enabled = true
port = 9090
endpoint = "/metrics"
collection_interval = "15s"
histogram_buckets = [0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1.0, 2.5, 5.0, 10.0]

[logging]
level = "info"
format = "json"
outputs = ["stdout"]

[logging.structured]
include_location = false
include_thread = true
include_service_metadata = true

[features]
realtime_streaming = true
archival = true
graphql_api = false
experimental = false