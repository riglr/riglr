name: Deploy Website to GitHub Pages

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'website/**'
      - '.github/workflows/deploy-docs.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install mdbook dependencies
        run: |
          # Install necessary packages for Arch Linux
          if command -v pacman &> /dev/null; then
            echo "Installing mdbook dependencies for Arch Linux..."
            sudo pacman -Syu --noconfirm --needed base-devel || true
          fi

      - name: Setup mdBook
        uses: peaceiris/actions-mdbook@v2
        with:
          mdbook-version: '0.4.52'

      - name: Build mdBook
        run: |
          cd docs
          
          # Debug: Show mdbook version and configuration
          echo "=== mdBook Version ==="
          mdbook --version
          
          echo "=== book.toml Configuration ==="
          cat book.toml
          
          # Generate documentation from source (same as build.sh)
          if [ -f generate_docs.py ] && command -v python3 &> /dev/null; then
            echo "=== Generating tool reference documentation ==="
            python3 generate_docs.py ../ src/tool-reference/
            echo "✓ Tool reference docs generated. Files:"
            ls -la src/tool-reference/ | head -10
          else
            echo "⚠️ Python3 not available or generate_docs.py not found"
          fi
          
          if [ -f generate_comprehensive_docs.py ] && command -v python3 &> /dev/null; then
            echo "=== Generating comprehensive API documentation ==="
            mkdir -p src/api-reference
            python3 generate_comprehensive_docs.py ../ src/api-reference/
            echo "✓ API reference docs generated. Files:"
            ls -la src/api-reference/ | head -10
          else
            echo "⚠️ Python3 not available or generate_comprehensive_docs.py not found"
          fi
          
          echo "=== Building mdBook ==="
          # Clean any previous build
          rm -rf book
          
          # Check available resources
          echo "Available disk space:"
          df -h .
          echo "Available memory:"
          free -h || echo "free command not available"
          
          # Now build mdbook with all generated content
          echo "Starting mdbook build..."
          mdbook build --dest-dir book
          
          echo "✓ mdbook build completed"
          
          echo "=== Files generated by mdBook build ==="
          find book -type f -name "*.js" -o -name "*.css" -o -name "*.html" | sort
          
          echo "=== Checking for critical files ==="
          ls -la book/toc.js || echo "❌ toc.js NOT generated by mdbook!"
          ls -la book/searchindex.js || echo "❌ searchindex.js NOT generated by mdbook!"
          ls -la book/css/ || echo "❌ CSS directory not found!"
          
          echo "=== JS Files Detail ==="
          for js_file in book/*.js; do
            if [ -f "$js_file" ]; then
              echo "File: $js_file ($(wc -c < "$js_file") bytes)"
              head -5 "$js_file" | sed 's/^/  /'
              echo "  ..."
            fi
          done
          
          # Fix paths for /docs/ deployment
          if [ -f fix_paths_for_deployment.sh ]; then
            echo "=== Running deployment path fixes ==="
            ./fix_paths_for_deployment.sh
          fi

      - name: Prepare deployment directory
        run: |
          # Create deployment structure
          mkdir -p deploy
          
          # Copy landing page to root
          cp website/index.html deploy/
          cp website/logo-h.png deploy/
          
          # Copy docs to /docs subdirectory
          cp -r docs/book deploy/docs
          
          # Ensure docs are accessible at both /docs and /docs/
          cp docs/book/index.html deploy/docs.html 2>/dev/null || true
          
          # Debug: List what's in the deployment directory
          echo "=== Deployment structure ==="
          find deploy -type f -name "*.js" -o -name "*.css" | head -20
          echo "=== Checking for critical files in deployment ==="
          ls -la deploy/docs/toc.js || echo "❌ toc.js not found in deployment!"
          ls -la deploy/docs/searchindex.js || echo "❌ searchindex.js not found in deployment!"
          ls -la deploy/docs/css/riglr.css || echo "❌ riglr.css not found in deployment!"
          
          echo "=== Comparison: book/ vs deploy/docs/ ==="
          echo "Files in book/:"
          ls -la docs/book/*.js | wc -l || echo "0"
          echo "Files in deploy/docs/:"
          ls -la deploy/docs/*.js | wc -l || echo "0"

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: ./deploy

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4