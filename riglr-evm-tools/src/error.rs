//! Error types for riglr-evm-tools.

use thiserror::Error;
use riglr_core::error::ToolError;
use riglr_core::SignerError;
use riglr_macros::IntoToolError;

/// Main error type for EVM tool operations.
/// 
/// The IntoToolError derive macro automatically classifies errors based on variant names:
/// - Retriable: Rpc, Http, Provider, Transaction (network-related)
/// - Permanent: Invalid*, InsufficientBalance, Unsupported*, Contract, Serialization
#[derive(Error, Debug, IntoToolError)]
pub enum EvmToolError {
    /// Core tool error - pass through directly
    #[error("Core tool error: {0}")]
    #[tool_error(permanent)]  // Will be handled specially in macro update
    ToolError(#[from] ToolError),
    
    /// Signer context error - pass through directly
    #[error("Signer context error: {0}")]
    #[tool_error(permanent)]  // Will be handled specially in macro update
    SignerError(#[from] SignerError),
    
    /// Provider error - automatically retriable
    #[error("Provider error: {0}")]
    ProviderError(String),
    
    /// Transaction build error - permanent
    #[error("Transaction build error: {0}")]
    #[tool_error(permanent)]
    TransactionBuildError(String),
    
    /// Invalid address format - automatically permanent
    #[error("Invalid address format: {0}")]
    InvalidAddress(String),
    
    /// Insufficient balance - automatically permanent
    #[error("Insufficient balance for operation")]
    InsufficientBalance,
    
    /// Unsupported chain ID - permanent
    #[error("Unsupported chain ID: {0}")]
    #[tool_error(permanent)]
    UnsupportedChain(u64),

    /// Serialization error - automatically permanent
    #[error("Serialization error: {0}")]
    Serialization(#[from] serde_json::Error),

    /// HTTP request error - automatically retriable
    #[error("HTTP error: {0}")]
    Http(#[from] reqwest::Error),

    /// Core riglr error - retriable by default
    #[error("Core error: {0}")]
    #[tool_error(retriable)]
    Core(#[from] riglr_core::CoreError),

    /// RPC client error - automatically retriable
    #[error("RPC error: {0}")]
    Rpc(String),

    /// Contract interaction failed - permanent
    #[error("Contract error: {0}")]
    #[tool_error(permanent)]
    Contract(String),

    /// Invalid private key - automatically permanent
    #[error("Invalid key: {0}")]
    InvalidKey(String),

    /// Transaction failed - retriable
    #[error("Transaction error: {0}")]
    #[tool_error(retriable)]
    Transaction(String),

    /// Generic error - permanent by default
    #[error("EVM tool error: {0}")]
    #[tool_error(permanent)]
    Generic(String),
}

/// Result type alias for EVM tool operations.
pub type Result<T> = std::result::Result<T, EvmToolError>;

// The From<EvmToolError> for ToolError implementation is now automatically
// generated by the IntoToolError derive macro. The macro classifies errors
// based on variant naming conventions and explicit #[tool_error] attributes.

