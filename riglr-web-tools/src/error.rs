//! Error types for riglr-web-tools.

use riglr_macros::IntoToolError;
use thiserror::Error;

/// Main error type for web tool operations.
///
/// The IntoToolError derive macro automatically classifies errors:
/// - Retriable: Network (includes HTTP), Api (includes request errors), RateLimit
/// - Permanent: Auth, Parsing (includes JSON), Config, Client, InvalidInput
#[derive(Error, Debug, IntoToolError)]
pub enum WebToolError {
    /// Network error (includes HTTP) - automatically retriable
    #[error("Network error: {0}")]
    Network(String),

    /// HTTP request error - automatically retriable (converted to Network)
    #[error("HTTP error: {0}")]
    Http(#[from] reqwest::Error),

    /// API error (includes general API issues) - automatically retriable
    #[error("API error: {0}")]
    Api(String),

    /// API rate limit exceeded - automatically handled as rate_limited
    #[error("Rate limit exceeded: {0}")]
    #[tool_error(rate_limited)]
    RateLimit(String),

    /// API authentication failed - permanent
    #[error("Authentication error: {0}")]
    #[tool_error(permanent)]
    Auth(String),

    /// Parsing error (includes JSON and response parsing) - permanent
    #[error("Parsing error: {0}")]
    #[tool_error(permanent)]
    Parsing(String),

    /// Serialization error - automatically permanent
    #[error("Serialization error: {0}")]
    Serialization(#[from] serde_json::Error),

    /// URL parsing error - permanent
    #[error("URL error: {0}")]
    #[tool_error(permanent)]
    Url(#[from] url::ParseError),

    /// Configuration error - permanent
    #[error("Configuration error: {0}")]
    #[tool_error(permanent)]
    Config(String),

    /// Client creation error - permanent
    #[error("Client error: {0}")]
    #[tool_error(permanent)]
    Client(String),

    /// Invalid input provided - permanent
    #[error("Invalid input: {0}")]
    #[tool_error(permanent)]
    InvalidInput(String),

    /// Core riglr error
    #[error("Core error: {0}")]
    #[tool_error(permanent)]
    Core(#[from] riglr_core::CoreError),
}

// The From<WebToolError> for ToolError implementation is now automatically
// generated by the IntoToolError derive macro. The macro intelligently
// classifies errors based on variant names and explicit #[tool_error] attributes.

/// Result type alias for web tool operations.
pub type Result<T> = std::result::Result<T, WebToolError>;
